{"ast":null,"code":"var _jsxFileName = \"/home/shilpa/Desktop/react/task/src/components/BodyContents/CheckBox/CheckBox.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CheckBox = ({\n  label,\n  handleFilters,\n  selected\n}) => {\n  _s();\n\n  const [checked, setChecked] = useState([]);\n\n  const handleChange = value => {\n    // const { checked } = e.target;\n    // onChange(checked);\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    setChecked(newChecked);\n    handleFilters();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"checkbox_style1\",\n    children: label.map(category => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"checkbox_align \",\n        htmlFor: category.name,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          onChange: () => handleChange(category.id),\n          className: \"checkbox_style form-check-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this), category.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this)\n    }, void 0, false))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CheckBox, \"wpcTo92rLAYHEZ4hrradcMGvahE=\");\n\n_c = CheckBox;\nCheckBox.propTypes = {\n  selected: PropTypes.bool.isRequired,\n  label: PropTypes.string.isRequired,\n  handleFilters: PropTypes.func.isRequired\n};\nexport default CheckBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckBox\");","map":{"version":3,"sources":["/home/shilpa/Desktop/react/task/src/components/BodyContents/CheckBox/CheckBox.js"],"names":["React","useState","PropTypes","CheckBox","label","handleFilters","selected","checked","setChecked","handleChange","value","currentIndex","indexOf","newChecked","push","splice","map","category","name","id","propTypes","bool","isRequired","string","func"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,aAAT;AAAwBC,EAAAA;AAAxB,CAAD,KAAwC;AAAA;;AACvD,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,EAAD,CAAtC;;AACA,QAAMQ,YAAY,GAAIC,KAAD,IAAW;AAC9B;AACA;AACA,UAAMC,YAAY,GAAGJ,OAAO,CAACK,OAAR,CAAgBF,KAAhB,CAArB;AACA,UAAMG,UAAU,GAAG,CAAC,GAAGN,OAAJ,CAAnB;;AAEA,QAAII,YAAY,KAAK,CAAC,CAAtB,EAAyB;AACvBE,MAAAA,UAAU,CAACC,IAAX,CAAgBJ,KAAhB;AACD,KAFD,MAEO;AACLG,MAAAA,UAAU,CAACE,MAAX,CAAkBJ,YAAlB,EAAgC,CAAhC;AACD;;AACDH,IAAAA,UAAU,CAACK,UAAD,CAAV;AAEAR,IAAAA,aAAa;AACd,GAdD;;AAeA,sBACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA,cAQGD,KAAK,CAACY,GAAN,CAAWC,QAAD,iBACT;AAAA,6BACE;AAAO,QAAA,SAAS,EAAC,iBAAjB;AAAmC,QAAA,OAAO,EAAEA,QAAQ,CAACC,IAArD;AAAA,gCACE;AACE,UAAA,IAAI,EAAC,UADP;AAEE,UAAA,QAAQ,EAAE,MAAMT,YAAY,CAACQ,QAAQ,CAACE,EAAV,CAF9B;AAGE,UAAA,SAAS,EAAC;AAHZ;AAAA;AAAA;AAAA;AAAA,gBADF,EAMGF,QAAQ,CAACC,IANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,qBADD;AARH;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD,CAxCD;;GAAMf,Q;;KAAAA,Q;AA0CNA,QAAQ,CAACiB,SAAT,GAAqB;AACnBd,EAAAA,QAAQ,EAAEJ,SAAS,CAACmB,IAAV,CAAeC,UADN;AAEnBlB,EAAAA,KAAK,EAAEF,SAAS,CAACqB,MAAV,CAAiBD,UAFL;AAGnBjB,EAAAA,aAAa,EAAEH,SAAS,CAACsB,IAAV,CAAeF;AAHX,CAArB;AAMA,eAAenB,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst CheckBox = ({ label, handleFilters, selected }) => {\n  const [checked, setChecked] = useState([]);\n  const handleChange = (value) => {\n    // const { checked } = e.target;\n    // onChange(checked);\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n    setChecked(newChecked);\n\n    handleFilters();\n  };\n  return (\n    <div className=\"checkbox_style1\">\n      {/* <input\n        type=\"checkbox\"\n        defaultChecked={selected}\n        value={selected}\n        onChange={handleChange}\n      />\n      <label htmlFor={label}>{label}</label> */}\n      {label.map((category) => (\n        <>\n          <label className=\"checkbox_align \" htmlFor={category.name}>\n            <input\n              type=\"checkbox\"\n              onChange={() => handleChange(category.id)}\n              className=\"checkbox_style form-check-input\"\n            />\n            {category.name}\n          </label>\n        </>\n      ))}\n    </div>\n  );\n};\n\nCheckBox.propTypes = {\n  selected: PropTypes.bool.isRequired,\n  label: PropTypes.string.isRequired,\n  handleFilters: PropTypes.func.isRequired,\n};\n\nexport default CheckBox;\n"]},"metadata":{},"sourceType":"module"}